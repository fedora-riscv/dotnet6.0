From 9a8c5e4014ffca8aff70808cc0e50a403d38c292 Mon Sep 17 00:00:00 2001
From: Stephen Toub <stoub@microsoft.com>
Date: Wed, 23 Oct 2019 20:35:49 -0400
Subject: [PATCH 2/2] Clean up new tests

---
 .../tests/Tests/Interop/cgroupsTests.cs       | 79 ++++++-------------
 1 file changed, 25 insertions(+), 54 deletions(-)

diff --git a/src/Common/tests/Tests/Interop/cgroupsTests.cs b/src/Common/tests/Tests/Interop/cgroupsTests.cs
index f16d9242879c..fc6ab5c9753c 100644
--- a/src/Common/tests/Tests/Interop/cgroupsTests.cs
+++ b/src/Common/tests/Tests/Interop/cgroupsTests.cs
@@ -2,38 +2,27 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 // See the LICENSE file in the project root for more information.
 
-using System;
 using System.IO;
-using System.Text;
 using Xunit;
 
 namespace Common.Tests
 {
-    public class cgroupsTests
+    public class cgroupsTests : FileCleanupTestBase
     {
         [Theory]
-        [InlineData(true, "0",  0)]
-        [InlineData(false, "max",  0)]
-        [InlineData(true, "1k",  1024)]
-        [InlineData(true, "1K",  1024)]
-        public static void ValidateTryReadMemoryValue(bool expectedResult, string valueText, ulong expectedValue)
+        [InlineData(true, "0", 0)]
+        [InlineData(false, "max", 0)]
+        [InlineData(true, "1k", 1024)]
+        [InlineData(true, "1K", 1024)]
+        public void ValidateTryReadMemoryValue(bool expectedResult, string valueText, ulong expectedValue)
         {
-            string path = Path.GetTempFileName();
-            try
-            {
-                File.WriteAllText(path, valueText);
-
-                bool result = Interop.cgroups.TryReadMemoryValueFromFile(path, out ulong val);
+            string path = GetTestFilePath();
+            File.WriteAllText(path, valueText);
 
-                Assert.Equal(expectedResult, result);
-                if (result)
-                {
-                    Assert.Equal(expectedValue, val);
-                }
-            }
-            finally
+            Assert.Equal(expectedResult, Interop.cgroups.TryReadMemoryValueFromFile(path, out ulong val));
+            if (expectedResult)
             {
-                File.Delete(path);
+                Assert.Equal(expectedValue, val);
             }
         }
 
@@ -50,26 +39,17 @@ public static void ValidateTryReadMemoryValue(bool expectedResult, string valueT
         [InlineData(true, "0 0 0:0 / /foo ignore ignore - cgroup cgroup cpu,memory", "memory", 1, "/", "/foo")]
         [InlineData(true, "0 0 0:0 / /foo ignore ignore - cgroup cgroup memory,cpu", "memory", 1, "/", "/foo")]
         [InlineData(false, "0 0 0:0 / /foo ignore ignore - cgroup cgroup cpu", "memory", 0, "/", "/foo")]
-        public static void ParseValidateMountInfo(bool found, string procSelfMountInfoText, string subsystem, int expectedVersion, string expectedRoot, string expectedMount)
+        public void ParseValidateMountInfo(bool expectedFound, string procSelfMountInfoText, string subsystem, int expectedVersion, string expectedRoot, string expectedMount)
         {
-            string path = Path.GetTempFileName();
-            try
-            {
-                File.WriteAllText(path, procSelfMountInfoText);
-
-                bool result = Interop.cgroups.TryFindHierarchyMount(path, subsystem,  out Interop.cgroups.CGroupVersion version, out string root, out string mount);
+            string path = GetTestFilePath();
+            File.WriteAllText(path, procSelfMountInfoText);
 
-                Assert.Equal(found, result);
-                if (found)
-                {
-                    Assert.Equal(expectedVersion, (int)version);
-                    Assert.Equal(expectedRoot, root);
-                    Assert.Equal(expectedMount, mount);
-                }
-            }
-            finally
+            Assert.Equal(expectedFound, Interop.cgroups.TryFindHierarchyMount(path, subsystem, out Interop.cgroups.CGroupVersion version, out string root, out string mount));
+            if (expectedFound)
             {
-                File.Delete(path);
+                Assert.Equal(expectedVersion, (int)version);
+                Assert.Equal(expectedRoot, root);
+                Assert.Equal(expectedMount, mount);
             }
         }
 
@@ -83,24 +63,15 @@ public static void ParseValidateMountInfo(bool found, string procSelfMountInfoTe
         [InlineData(false, "2:foo:bar", "bar", "ignore")]
         [InlineData(true, "1:foo:bar\n2:eggs:spam", "foo", "bar")]
         [InlineData(true, "1:foo:bar\n2:eggs:spam", "eggs", "spam")]
-        public static void ParseValidateProcCGroup(bool found, string procSelfCgroupText, string subsystem, string expectedMountPath)
+        public void ParseValidateProcCGroup(bool expectedFound, string procSelfCgroupText, string subsystem, string expectedMountPath)
         {
-            string path = Path.GetTempFileName();
-            try
-            {
-                File.WriteAllText(path, procSelfCgroupText);
+            string path = GetTestFilePath();
+            File.WriteAllText(path, procSelfCgroupText);
 
-                bool result = Interop.cgroups.TryFindCGroupPathForSubsystem(path, subsystem,  out string mountPath);
-
-                Assert.Equal(found, result);
-                if (found)
-                {
-                    Assert.Equal(expectedMountPath, mountPath);
-                }
-            }
-            finally
+            Assert.Equal(expectedFound, Interop.cgroups.TryFindCGroupPathForSubsystem(path, subsystem, out string mountPath));
+            if (expectedFound)
             {
-                File.Delete(path);
+                Assert.Equal(expectedMountPath, mountPath);
             }
         }
     }
