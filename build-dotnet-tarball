#!/bin/bash

# Usage:
#   build-dotnet-tarball <tag-from-source-build>
#
# Creates a source archive from a tag (or commit) at github.com/dotnet/source-build

# Source-build is a little strange, we need to clone it, check out the
# tag, build it and then create a tarball from the archive directory
# it creates. Also, it is likely that the source archive is only
# buildable on the OS it was initially created in.

set -euo pipefail
IFS=$'\n\t'

print_usage() {
    echo "Usage:"
    echo "$0 <tag-from-source-build>"
    echo
    echo "Creates a source archive from a tag at https://github.com/dotnet/source-build"
}

clean_dotnet_cache() {
    rm -rf ~/.aspnet ~/.dotnet/ ~/.nuget/ ~/.local/share/NuGet ~/.templateengine
    rm -rf /tmp/NuGet /tmp/NuGetScratch /tmp/.NETCore* /tmp/.NETStandard* /tmp/.dotnet /tmp/dotnet.* /tmp/clr-debug-pipe* /tmp/Razor-Server /tmp/CoreFxPipe* /tmp/VBCSCompiler /tmp/.NETFramework*
}

function runtime_id {

    declare -A archmap
    archmap=(
        ["aarch64"]="arm64"
        ["amd64"]="x64"
        ["armv8l"]="arm"
        ["i686"]="x86"
        ["i386"]="x86"
        ["x86_64"]="x64"
    )

    arch=${archmap["$(uname -m)"]}

    source /etc/os-release
    case "${ID}" in
        # Remove the RHEL minor version
        rhel) rid_version=${VERSION_ID%.*} ;;

        *) rid_version=${VERSION_ID} ;;
    esac

    echo "${ID}.${rid_version}-${arch}"
}

positional_args=()
while [[ "$#" -gt 0 ]]; do
    arg="${1}"
    case "${arg}" in
        -h|--help)
            print_usage
            exit 0
            ;;
        *)
            positional_args+=("$1")
            shift
            ;;
    esac
done


tag=${positional_args[0]:-}
if [[ -z ${tag} ]]; then
    echo "error: missing tag to build"
    exit 1
fi

set -x

dir_name="dotnet-${tag}"
unmodified_tarball_name="${dir_name}-original"
tarball_name="${dir_name}"

if [ -f "${tarball_name}.tar.gz" ]; then
    echo "error: ${tarball_name}.tar.gz already exists"
    exit 1
fi

if [ ! -f "${unmodified_tarball_name}.tar.gz" ]; then
    temp_dir=$(mktemp -d -p "$(pwd)")
    pushd "${temp_dir}"
    git clone https://github.com/dotnet/source-build
    pushd source-build
    git checkout "${tag}"
    git submodule update --init --recursive
    clean_dotnet_cache
    # FIXME remove contineuonprebuilterror
    ./build.sh -p:SkipPrebuiltEnforcement=true -p:ContinueOnPrebuiltBaselineError=true -p:ArchiveDownloadedPackages=true -p:UseSystemLibraries=true
    ./build-source-tarball.sh "${unmodified_tarball_name}" --skip-build -- -p:ContinueOnPrebuiltBaselineError=true -p:SkipPrebuiltEnforcement=true
    popd
    popd

    tar czf "${unmodified_tarball_name}.tar.gz" -C "${temp_dir}/source-build" "${unmodified_tarball_name}"

    rm -rf "${temp_dir}"
fi

rm -rf "${tarball_name}"
tar xf "${unmodified_tarball_name}.tar.gz"
mv "${unmodified_tarball_name}" "${tarball_name}"

pushd "${tarball_name}"
# Remove files with funny licenses, crypto implementations and other
# not-very-useful artifacts to reduce tarball size
rm -r src/aspnetcore.*/src/SignalR/clients/java/signalr/gradle*
find src/aspnetcore.*/src -type d -name samples -print0 | xargs -0 rm -r
rm -r src/NuGet.Client.*/test/EndToEnd
find src/runtime.*/ -depth -name tests -print0 | xargs -0 rm -r
rm -r src/runtime.*/src/mono/
rm -r src/Humanizer.*/samples/

# FIXME delete when upstream has a new release with this file fixed
if ! grep "RSA Data Security" src/runtime.*/src/libraries/System.Security.Cryptography.Algorithms/src/Internal/Cryptography/SHAHashProvider.Browser.cs; then
    echo "SHAHashProvider.Browser.cs has been fixed upstream. Please fix build-dotnet-tarball"
    exit 1
fi
# Delete the bad source
rm src/runtime.*/src/libraries/System.Security.Cryptography.Algorithms/src/Internal/Cryptography/SHAHashProvider.Browser.cs
# Delete the patch that modifies the bad source
rm patches/runtime/0001-Use-substitute-SHA-1-implementation-in-wasm-44982.patch
# Add pre-patched copy
cp ../SHAHashProvider.Browser.cs src/runtime.*/src/libraries/System.Security.Cryptography.Algorithms/src/Internal/Cryptography/

popd

tar czf "${tarball_name}.tar.gz" "${tarball_name}"
